/**
 *  List Of Mixins
 *    - all-buttons = applies styles to all button types (**has additional parameters)
 *    - all-text-inputs = applies styles to all text input types (**has additional parameters)
 *    - border-radius = applies border radius (**has additional parameters)
 *    - center = applies center alignment based on translate property (**has additional parameters)
 *    - circle = creates circular shape of the given element
 *    - columnizer = creates column layout based on flex layout (**has additional parameters)
 *    - ellipsis = creates text overflow ellipsis (**has additional parameters)
 *    - except = helps you to target elements that you do not want to apply style changes to (**has additional parameters)
 *    - hide = allow you to improve web accessibility by hiding elements (**has additional parameters)
 *    - linear-gradient = helps you to generate colorful CSS gradients (**has additional parameters)
 *    - only = helps you to filter elements that match based on their position among a group of siblings. This is opposite of except mixin. (**has additional parameters)
 *    - placeholder = helps to style placeholders inside an element (**has additional parameters)
 *    - position = provides a one-line method to rapidly set both the position and the offset properties of a selected element (**has additional parameters)
 *    - radial-gradient = helps you generate beautiful radial CSS gradients (**has additional parameters)
 *    - ratio-box = helps you create proportional CSS boxes based on the aspect ratio values ​​you pass (**has additional parameters)
 *    - resizable = helps you to make an element resizable on both horizontal or vertical directions (**has additional parameters)
 *    - responsive-image = helps you to make images responsive and change the default display CSS property value from inline to block
 *    - responsive-video = helps you create responsive containing elements with a fixed aspect ratio that you define (**has additional parameters)
 *    - sprite = helps you to apply background images to the selected element(s) by using CSS Sprite technique (**has additional parameters)
 *    - stretched-link = spreads the clickability of a link to the entire area of its containing block. Parent element must have position: relative property (**has additional parameters)
 */


/* General All Buttons Mixin */
@mixin all-buttons($pseudo: null) {
  $list: "hover", "focus", "active", "disabled";
  @if not $pseudo {
    #{$list-of-buttons} {
      @content;
    }   
  } @else if index($list, $pseudo) {
    $all-buttons: __pseudoSelector($list-of-buttons, $pseudo);
    #{$all-buttons} {
      @content;
    }
  } @else {
    @error "The argument must be `null` or one of the followings: #{quote($list)}.";
  }
}



/* General All Text Input Mixin */
@mixin all-text-inputs($pseudo: null) {
  $list: "hover", "focus", "active", "invalid", "required", "disabled";
  @if not $pseudo {
    #{$list-of-text-inputs} {
      @content;
    }
  } @else if index($list, $pseudo) {
    $all-text-inputs: __pseudoSelector($list-of-text-inputs, $pseudo);
    #{$all-text-inputs} {
      @content;
    }
  } @else {
    @error "The argument must be `null` or one of the followings: #{quote($list)}";
  }
}



/* Border Radius Mixin */
@mixin border-radius($args...) {
  $list: join($list-of-directions, ("cross-left", "cross-right", "all"));
  @if length($args) == 1 {
    $value: nth($args, 1);
    border-radius: __null($value, space);
  } @else if length($args) == 2 {
    $corner: nth($args, 1);
    $value: nth($args, 2);
    @if index($list, $corner) {
      @if $corner == "top" {
        border-top-left-radius: $value;
        border-top-right-radius: $value;
      } @else if $corner == "top-right" {
        border-top-right-radius: $value;
      } @else if $corner == "right" {
        border-top-right-radius: $value;
        border-bottom-right-radius: $value;
      } @else if $corner == "bottom-right" {
        border-bottom-right-radius: $value;
      } @else if $corner == "bottom" {
        border-bottom-left-radius: $value;
        border-bottom-right-radius: $value;
      } @else if $corner == "bottom-left" {
        border-bottom-left-radius: $value;
      } @else if $corner == "left" {
        border-top-left-radius: $value;
        border-bottom-left-radius: $value;
      } @else if $corner == "top-left" {
        border-top-left-radius: $value;
      } @else if $corner == "all" {
        border-radius: $value;
      } @else if $corner == "cross-left" {
        border-top-left-radius: $value;
        border-bottom-right-radius: $value;
      } @else if $corner == "cross-right" {
        border-top-right-radius: $value;
        border-bottom-left-radius: $value;
      }
    } @else {
      @error "Corner value must be one of the followings: #{quote($list)}.";
    }
  } @else if length($args) == 4 {
    $args: __null($args, space, true);
    border-top-left-radius: nth($args, 1);
    border-top-right-radius: nth($args, 2);
    border-bottom-right-radius: nth($args, 3);
    border-bottom-left-radius: nth($args, 4);
  }
}



/* Mixin for vertically and horizontally aligning elements (tarnslate method) */
@mixin center($axis: "both") {
  @if $axis == "both" or $axis == "vertical" {
    top: 50%;
  }
  @if $axis == "both" or $axis == "horizontal" {
    left: 50%;
  }
  transform: 
    if($axis == "horizontal", translateX(-50%), if($axis == "both", translateX(-50%), null))
    if($axis == "vertical", translateY(-50%), if($axis == "both", translateY(-50%), null))
  ;
}



/* Mixin to create a circular shape */
@mixin circle($size) {
  width: $size;
  height: $size;
  display: inline-block;
  border-radius: 100%;
}



/* Mixin to create columns (flex columns. must be applied to the parent) */
@mixin columnizer($params...) {
  $columns: nth($params, 1);
  $gutter: null;
  $fill: false;
  display: flex;
  flex-wrap: wrap;
  @include border-box;
  > * {
    @if length($params) == 1 {
      flex: 0 0 calc(100% / #{$columns});
      margin-bottom: 0;
      &:not(:last-child) {
        margin-right: 0;
      }
    } @else if length($params) == 2 {
      @if type-of(nth($params, 2)) == bool {
        $fill: nth($params, length($params));
        flex-grow: #{if($fill == true, 1, 0)};
        flex-shrink: 0;
        flex-basis: calc(100% / #{$columns});
        margin-bottom: 0;
        &:not(:last-child) {
          margin-right: 0;
        }
      } @else if type-of(nth($params, 2)) == number {
        $gutter: nth($params, length($params));
        flex-grow: 0;
        flex-shrink: 0;
        flex-basis: calc((100% - (#{$columns} - 1) * #{$gutter}) / #{$columns});
        margin-bottom: $gutter;
        &:not(:last-child) {
          margin-right: $gutter;
        }
        &:nth-child(#{$columns}n) {
          margin-right: 0;
        }
      }
    } @else if length($params) == 3 {
      $gutter: nth($params, 2);
      $fill: nth($params, length($params));
      flex-grow: if($fill == true, 1, 0);
      flex-shrink: 0;
      flex-basis: calc((100% - (#{$columns} - 1) * #{$gutter}) / #{$columns});
      margin-bottom: $gutter;
      &:not(:last-child) {
        margin-right: $gutter;
      }
      &:nth-child(#{$columns}n) {
        margin-right: 0;
      }
    }
  }
}



/* Mixin to create text overflow ellipsis */
@mixin ellipsis($width: 100%, $display: inline-block) {
  display: $display;
  max-width: $width;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  word-wrap: normal;
}



/* Mixin to use :not operator */
@mixin except($params...) {
  @if length($params) == 0 {
    @error "Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.";
  } @else if length($params) == 1 {
    $value: nth($params, 1);
    @if type-of($value) == "number" {
      @if $value < 0 {
        &:not(:nth-last-of-type(#{$value * -1})) {
          @content;
        }
      } @else {
        &:not(:nth-of-type(#{$value})) {
          @content;
        }
      }
    } @else if type-of($value) == "string" {
      @if $value == "odd" {
        &:not(:nth-of-type(odd)) {
          @content;
        }
      } @else if $value == "even" {
        &:not(:nth-of-type(even)) {
          @content;
        }
      } @else if $value == "first" {
        &:not(:first-of-type) {
          @content;
        }
      } @else if $value == "last" {
        &:not(:last-of-type) {
          @content;
        }
      } @else {
        &:not(#{$value}) {
          @content;
        }
      }
    }
  } @else if length($params) > 1 {
    $items: "";
    @for $i from 1 through length($params) {
      $items: $items + if(nth($params, $i) < 0, unquote(":not(:nth-last-of-type(#{nth($params, $i) * -1}))"), unquote(":not(:nth-of-type(#{nth($params, $i)}))"));
    }
    &#{$items} {
      @content;
    }
  }
}



/* Mixin to hide/unhide elements */
@mixin hide($toggle: "hide") {
  @if $toggle == "hide" {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    border: 0;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(100%);
    white-space: nowrap;
  } @else if $toggle == "unhide" {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    clip-path: none;
    white-space: inherit;
  } @else if not index ("hide" "unhide", $toggle) {
    @error "#{$toggle} is not a valid value for the `$toggle` argument. The value must be either `hide` or `unhide`.";
  }
}



/* Mixin to create liniear gradients */
@mixin linear-gradient($direction, $colors) {
  $list: ();
  @for $i from 1 through length($colors) {
    $list: append($list, nth($colors, $i), comma);
  }
  @if map-has-key($map-for-directions, $direction) {
    background: linear-gradient(
      map-get($map-for-directions, $direction),
      $list
    );
  } @else if not map-has-key($map-for-directions, $direction) {
    @if not index("deg", unit($direction)) {
      @error "#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.";
    } @else {
      background: linear-gradient($direction, $list);
    }
  }
}



/* Mixin to target specific child (opposite of except) */
@mixin only($params...) {
  @if length($params) == 0 {
    @error "Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.";
  } @else if length($params) == 1 {
    $value: nth($params, 1);
    @if type-of($value) == "number" {
      @if $value < 0 {
        &:nth-last-of-type(#{$value * -1}) {
          @content;
        }
      } @else {
        &:nth-of-type(#{$value}) {
          @content;
        }
      }
    } @else if type-of($value) == "string" {
      @if $value == "odd" {
        &:nth-of-type(odd) {
          @content;
        }
      } @else if $value == "even" {
        &:nth-of-type(even) {
          @content;
        }
      } @else if $value == "first" {
        &:first-of-type {
          @content;
        }
      } @else if $value == "last" {
        &:last-of-type {
          @content;
        }
      } @else {
        // For class, id or attribute selectors.
        &#{$value} {
          @content;
        }
      }
    }
  } @else if length($params) > 1 {
    $list: ();
    @for $i from 1 through length($params) {
      $list: append($list, if(nth($params, $i) < 0, unquote("&:nth-last-of-type(#{nth($params, $i) * -1})"), unquote("&:nth-of-type(#{nth($params, $i)})")), comma);
    }
    #{$list} {
      @content;
    }
  }
}



/* Mixin to style placeholders */
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::placeholder {
    @content;
  }
}



/* Mixin to set fixed or absolute positions */
@mixin position($position: absolute, $offsets: 0) {
  $offsets: __shorthandProperty($offsets);
  $positioning-offsets: (
    top: nth($offsets, 1),
    right: nth($offsets, 2),
    bottom: nth($offsets, 3),
    left: nth($offsets, 4),
  );
  position: $position;
  @each $offset, $value in $positioning-offsets {
    @if __validateLength($value) {
      #{$offset}: $value;
    }
  }
}



/* Mixin to create radial gradients */
@mixin radial-gradient($shape, $position, $colors) {
  $list: ();
  $shape: unquote($shape);
  $position: unquote($position);
  @for $i from 1 through length($colors) {
    $list: append($list, nth($colors, $i), comma);
  }
  @if map-has-key($map-for-positions, $position) {
    background: radial-gradient(
      $shape map-get($map-for-positions, $position),
      $list
    );
  } @else if not map-has-key($map-for-positions, $position) {
    background: radial-gradient($shape $position, $list);
  }
}



/* Mixin to help you create proportional CSS boxes */
@mixin ratio-box($ratio: null) {
  position: relative;
  &::before {
    content: "";
    display: block;
    @if not $ratio {
      padding-top: 56.25%;
    } @else if $ratio {
      @if type-of($ratio) == string {
        $width: null;
        $height: null;
        @if str-index($ratio, "/") {
          $fslash-index: str-index($ratio, "/");
          $width: __convertToNumber(str-slice($ratio, 1, $fslash-index - 1));
          $height: __convertToNumber(str-slice($ratio, $fslash-index + 1));
        } @else if str-index($ratio, ":") {
          $colon-index: str-index($ratio, ":");
          $width: __convertToNumber(str-slice($ratio, 1, $colon-index - 1));
          $height: __convertToNumber(str-slice($ratio, $colon-index + 1));
        }
        $calc: math.div($height, $width) * 100;
        padding-top: #{$calc * 1%};
      } @else if type-of($ratio) == number {
        padding-top: math.div(1, $ratio) * 100%;
      }
    }
  }
  & > * {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}



/* Mixin to enable element resizing */
@mixin resizable($direction: both, $overflow: auto) {
  resize: $direction;
  overflow: $overflow;
  max-width: 100%;
}



/* Mixin to apply responsive image */
@mixin responsive-image {
  display: block;
  width: 100%;
  height: auto;
}



/* Mixin to create responsive video container */
@mixin responsive-video($ratio: null) {
  position: relative;
  &::before {
    content: "";
    display: block;
    @if not $ratio {
      padding-top: 56.25%;
    } @else if $ratio {
      @if type-of($ratio) == string {
        $width: null;
        $height: null;
        @if str-index($ratio, "/") {
          $fslash-index: str-index($ratio, "/");
          $width: __convertToNumber(str-slice($ratio, 1, $fslash-index - 1));
          $height: __convertToNumber(str-slice($ratio, $fslash-index + 1));
        } @else if str-index($ratio, ":") {
          $colon-index: str-index($ratio, ":");
          $width: __convertToNumber(str-slice($ratio, 1, $colon-index - 1));
          $height: __convertToNumber(str-slice($ratio, $colon-index + 1));
        }
        $calc: math.div($height, $width) * 100;
        padding-top: #{$calc * 1%};
      } @else if type-of($ratio) == number {
        padding-top: math.div(1, $ratio) * 100%;
      }
    }
  }
  & > * {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}



/* Mixin to position sprite images */
@mixin sprite($params...) {
  @if length($params) == 1 {
    @if type-of(nth($params, 1)) == "string" {
      $str-length: str-length(nth($params, 1));
      $str-end: str-slice(nth($params, 1), $str-length - 3);
      @if index(".png" ".jpg" ".svg", $str-end) {
        $image-url: nth($params, 1);
        display: inline-block;
        background-image: url($image-url);
        background-repeat: no-repeat;
      }
    } @else {
      $position: nth($params, 1);
      background-position: $position;
    }
  } @else if length($params) == 2 {
    $image-url: nth($params, 1);
    $position: nth($params, 2);
    display: inline-block;
    background-image: url($image-url);
    background-position: $position;
    background-repeat: no-repeat;
  }
  @content;
}



/* Mixin to create stretchable link */
@mixin stretched-link($value: "before") {
  @if index("before" "after", $value) {
    &#{"::" + $value} {
      content: "";
      position: absolute;
      pointer-events: auto;
      background-color: rgba(0, 0, 0, 0);
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1;
    }
  } @else {
    @error "'#{$value}' is a wrong argument. This mixin accepts 'before' or 'after' as an argument. If you don't pass any argument default it will target the '::before' pseudo-element of the selected element.";
  }
}

// Gradient
@mixin gradient($direction, $color-list) { 
   background: -webkit-linear-gradient($direction, $color-list);
   background: -moz-linear-gradient($direction, $color-list);
   background: -o-linear-gradient($direction, $color-list);
   background: linear-gradient($direction, $color-list);  
}


// Box shadow
@mixin box-shadow-outset($h-offset, $v-offset, $blur, $spread, $color) {
   box-shadow: $h-offset $v-offset $blur $spread $color;
}

// Transition
@mixin ease-in-out-quad($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}