@use 'sass:math';

/* Function to convert to rem from px */
@function __toRem($pxValue) {
  @return math.div($pxValue, 16px) * 1rem;
}


/* Function to check any valid color */
@function __isColor($value) {
  $list: ();
  @for $i from 1 through length($value) {
    @if type-of(nth($value, $i)) == "color" {
      $list: append($list, nth($value, $i), comma);
    } @else {
      @error "'#{nth($value, $i)}' is not a color value, please replace it with a valid one.";
    }
  }
  @return $list;
}


/* Function to darken any color */
@function __darken($color, $percentage) {
	@if __isColor($color) {
		@return mix(black, $color, $percentage);
	}
}


/* Function to lighten any color */
@function __lighten($color, $percentage) {
  @if __isColor($color) {
    @return mix(white, $color, $percentage);
  }
}


/* Function shorthand property */
@function __shorthandProperty($value) {
  @if length($value) == 1 {
    @return nth($value, 1) nth($value, 1) nth($value, 1) nth($value, 1);
  } @else if length($value) == 2 {
    @return nth($value, 1) nth($value, 2) nth($value, 1) nth($value, 2);
  } @else if length($value) == 3 {
    @return nth($value, 1) nth($value, 2) nth($value, 3) nth($value, 2);
  } @else if length($value) == 4 {
    @return nth($value, 1) nth($value, 2) nth($value, 3) nth($value, 4);
  } @else if length($value) > 4 {
    @error "You've passed #{length($value)} arguments. Please do not pass more than 4.";
  }
}


/* Function to validate length */
@function __validateLength($value) {
  $list: ("auto", "inherit", "initial", 0);
  @if index($list, $value) {
    @return $value;
  } @else if type-of($value) == "number" and not unitless($value) {
    @return $value;
  } @else {
    @warn "Please pass some values with unit like `#{$value}px`, `#{$value}em`, or `#{$value}%` etc. or pass one of the following arguments: `auto`, ìnherit`, ìnitial` or `0`.";
    @return $value;
  }
}


/* Function to convert to number */
@function __convertToNumber($value) {

  $string-numerals: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $calc: 0;

  @for $i from 1 through str-length($value) {
    //Takes every digits in the $value
    $digit: str-slice($value, $i, $i);

    //Finds the index position of $digit in the $value
    $index-of-digit: index($string-numerals, $digit);

    // That is because SASS strings are not "0" based but "1", the index position of every digits will be more by one. Here is the simple calculation to find the actual number.
    $actual-digit: $index-of-digit - 1;

    // Calculates the actual number.
    $calc: $calc * 10 + $actual-digit;
  }
  @return $calc;
}